---
title: "04_Granger_test"
author: "Hongbo_Zhao"
format: html
editor: visual
---

## 1. Granger Causality Test for Predictor Selection

To identify statistically significant predictors of traffic copper cable theft, we conducted Granger causality tests across multiple candidate variables and lag structures. This step aims to assess whether past values of an explanatory variable contain predictive information about future theft incidents, thereby informing subsequent model specification.

We considered six potential explanatory variables based on theoretical relevance and prior empirical findings: `intervention`, `Total_theft`, `Copper_price`, `Unwork_NSW`, `Scrap_Imports_CN`, and `t_since`. Each variable was tested across a range of 1 to 6 monthly lags, aligning with typical expectations of short- to medium-term causal delay. The dataset was divided into training and testing subsets using a temporal cutoff at July 1st, 2021.

The function `get_granger_p()` was defined to automate p-value extraction from `grangertest()` results, using `reformulate()` for dynamic formula construction. This allowed systematic iteration across all variable-lag combinations, producing a matrix of p-values stored in both long and wide formats for further inspection.

To facilitate interpretation, we visualized the results using a heatmap that color-codes significance thresholds (`p < 0.01`, `p < 0.05`, `p < 0.1`, and `Not significant`). Each cell indicates the p-value corresponding to a specific variable-lag pair, enabling transparent and reproducible variable screening prior to model estimation.

```{r}
options(repos = c(CRAN = "https://cloud.r-project.org"))

# Split into training and tesing datasets
train_data <- combined_data %>% filter(date >= as.Date("2010-01-01") & date < as.Date("2021-07-01"))
test_data <- combined_data %>% filter(date >= as.Date("2021-07-01") & date < as.Date("2023-06-01"))

# Define candidate variables and lags
variables_Granger <- c("intervention", "Total_theft", "Copper_price", "Unwork_NSW", "Scrap_Imports_CN", "t_since")
lags <- 1:6

# Function to compute p-value from Granger test
get_granger_p <- function(var, lag) {
  formula <- reformulate(var, response = "cases")
  test <- grangertest(formula, order = lag, data = train_data)
  return(test$`Pr(>F)`[2])
}

# Generate p-values for all combinations
granger_results_all <- expand.grid(Variable = variables_Granger, Lag = lags) %>%
  mutate(P_Value = map2_dbl(as.character(Variable), Lag, get_granger_p))

# Reshape to wide format
granger_wide <- granger_results_all %>%
  mutate(Lag = paste0("Lag_", Lag, "_month")) %>%
  pivot_wider(names_from = Lag, values_from = P_Value)

# Label mapping for plot
variable_labels <- c(
  intervention = "Legislation",
  Total_theft = "Total_theft (NSW)",
  Copper_price = "Global Copper Price",
  Unwork_NSW = "Unemployment (NSW)",
  Scrap_Imports_CN = "China's Scrap Imports",
  t_since = "Time Since Intervention"
)

# Prepare visualization data
granger_plot_data <- granger_results_all %>%
  mutate(
    Variable_Label = variable_labels[Variable],
    Lag_Label = paste0("Lag ", Lag),
    Significance = cut(
      P_Value,
      breaks = c(-Inf, 0.01, 0.05, 0.1, Inf),
      labels = c("p < 0.01", "p < 0.05", "p < 0.1", "Not significant")
    )
  )

# Plot heatmap
ggplot(granger_plot_data, aes(x = Lag_Label, y = Variable_Label, fill = Significance)) +
  geom_tile(color = "white") +
  geom_text(aes(label = sprintf("%.2e", P_Value)), size = 3.5) +
  scale_fill_manual(values = c("p < 0.01" = "#b2182b", "p < 0.05" = "#ef8a62", "p < 0.1" = "#fee08b", "Not significant" = "#66c2a5")) +
  theme_minimal(base_size = 10) +
  labs(
    title = "Granger Causality Test Results (p-values)",
    x = "Lag", y = "Variable",
    fill = "Significance Level"
  ) +
  theme(
    plot.title = element_text(size = 14, face = "bold"),
    axis.title = element_text(size = 12),
    axis.text = element_text(size = 10),
    panel.grid = element_blank()
  )
```

## 2. Lag and Seasonal Feature Construction for Predictive Modelling

To prepare the dataset for downstream modeling (e.g., log-log and ARIMAX), we applied a series of data transformation steps based on the Granger causality results. Specifically, lagged versions of key explanatory variables were created according to the optimal lag orders identified from the Granger testsâ€”such as a 1-month lag for `Copper_price` and a 6-month lag for `Scrap_Imports_CN`. This ensured temporal causality alignment between predictors and the response variable `cases`.

Subsequently, a logarithmic transformation (`log(x + 1)`) was applied to both the dependent variable and lagged explanatory variables to address skewness and zero-value issues while preserving interpretability under the log-log modeling framework.

To account for seasonal variations in copper cable theft, we extracted the month component from the date variable and constructed eleven dummy variables corresponding to February through December. These monthly dummies capture deviation effects relative to January (serving as the reference group), enabling the subsequent models to control for potential intra-annual seasonality in theft occurrences.

```{r}
# Extract month information
combined_data <- combined_data %>% mutate(Month = as.factor(month(date)))

# Create lagged variables
combined_data <- combined_data %>% mutate(intervention.lag = lag(intervention, 1))
combined_data <- combined_data %>% mutate(Total_theft.lag = lag(Total_theft, 1))
combined_data <- combined_data %>% mutate(Copper_price.lag = lag(Copper_price, 1))
combined_data <- combined_data %>% mutate(t_since.lag = lag(t_since, 1))
combined_data <- combined_data %>% mutate(Unwork_NSW.lag = lag(Unwork_NSW, 5))
combined_data <- combined_data %>% mutate(Scrap_Imports_CN.lag = lag(Scrap_Imports_CN, 6))

# Remove missing which caused by lagging
combined_data <- combined_data %>% filter(!is.na(intervention.lag))
combined_data <- combined_data %>% filter(!is.na(Total_theft.lag))
combined_data <- combined_data %>% filter(!is.na(Copper_price.lag))
combined_data <- combined_data %>% filter(!is.na(t_since.lag))
combined_data <- combined_data %>% filter(!is.na(Unwork_NSW.lag))
combined_data <- combined_data %>% filter(!is.na(Scrap_Imports_CN.lag))

# Create log-transformed variables (to address zero-value issues)
combined_data <- combined_data %>%
  mutate(
    log_cases = log(cases + 1), 
    log_Total_theft.lag = log(Total_theft.lag + 1),
    log_Copper_price.lag = log(Copper_price.lag + 1),
    log_t_since.lag = log(t_since.lag +1),
    log_Unwork_NSW.lag = log(Unwork_NSW.lag + 1),
    log_Scrap_Imports_CN.lag = log(Scrap_Imports_CN.lag + 1),
  )


# Split into training and tesing datasets
train_data <- combined_data %>% filter(date >= as.Date("2010-01-01") & date < as.Date("2021-07-01"))
test_data <- combined_data %>% filter(date >= as.Date("2021-07-01") & date < as.Date("2023-06-01"))

train_data <- train_data %>%
  mutate(
    Feb = ifelse(Month == 2, 1, 0),
    Mar = ifelse(Month == 3, 1, 0),
    APr = ifelse(Month == 4, 1, 0),
    May = ifelse(Month == 5, 1, 0),
    Jun = ifelse(Month == 6, 1, 0),
    Jul = ifelse(Month == 7, 1, 0),
    Aug = ifelse(Month == 8, 1, 0),
    Sep = ifelse(Month == 9, 1, 0),
    Oct = ifelse(Month == 10, 1, 0),
    Nov = ifelse(Month == 11, 1, 0),
    Dec = ifelse(Month == 12, 1, 0),
  )



test_data <- test_data %>%
  mutate(
    Feb = ifelse(Month == 2, 1, 0),
    Mar = ifelse(Month == 3, 1, 0),
    APr = ifelse(Month == 4, 1, 0),
    May = ifelse(Month == 5, 1, 0),
    Jun = ifelse(Month == 6, 1, 0),
    Jul = ifelse(Month == 7, 1, 0),
    Aug = ifelse(Month == 8, 1, 0),
    Sep = ifelse(Month == 9, 1, 0),
    Oct = ifelse(Month == 10, 1, 0),
    Nov = ifelse(Month == 11, 1, 0),
    Dec = ifelse(Month == 12, 1, 0)
  )
```

Last updated: 23 July 2025 Maintainer: \[Hongbo Zhao / Contact: hongbo.zhao\@uqconnect.edu.au\]
