---
title: "ARIMAX analysis"
format:
  html:
    code-overflow: wrap
editor: visual
---

## ARIMAX Model Specification and Reproducibility Protocol

To ensure reproducibility and transparency in our time series forecasting analysis, we detail the full modeling pipeline for the ARIMAX (AutoRegressive Integrated Moving Average with Exogenous Variables) model below. All steps were implemented in R (version ≥ 4.2.0), using packages including `forecast`, `ggplot2`, `lmtest`, `car`, and `tseries`.

## Variable Selection and Stepwise Reduction

We constructed the exogenous regressor matrix (`xreg`) from a set of candidate predictors including lagged values of total thefts (`Total_theft.lag`), copper price (`Copper_price.lag`), unemployment rate in NSW (`Unwork_NSW.lag`), scrap imports, intervention dummies, and monthly indicators (February to December). A stepwise backward elimination procedure was adopted to remove statistically insignificant variables. This process involved sequentially excluding predictors with high p-values and retraining the model to improve parsimony without compromising predictive performance (Models 1–12).

Each ARIMAX model was estimated using the `auto.arima()` function with the argument `seasonal = TRUE` to capture periodic effects. Parameter estimation was conducted without approximation and with full optimization (`stepwise = FALSE, approximation = FALSE`). Coefficients were evaluated using the `coeftest()` function from the `lmtest` package.

```{r}
options(repos = c(CRAN = "https://cloud.r-project.org"))
```

```{r}
# Construct external varibale matrix
Xreg_matrix_1 <- model.matrix(~ Total_theft.lag + Scrap_Imports_CN.lag + Copper_price.lag + Unwork_NSW.lag + intervention.lag + t_since.lag + Feb + Mar + APr + May + Jun + Jul + Aug + Sep + Oct + Nov + Dec, data = train_data)

# Train the SARIMAX model
arimax_model_1 <- auto.arima(train_data$cases, xreg = Xreg_matrix_1, max.p = 5, max.d = 2, max.q = 5, 
                             seasonal = TRUE, stepwise = FALSE, approximation = FALSE)
# Model summary
summary(arimax_model_1)

# Coefficient test
coeftest(arimax_model_1)
```

```{r}
# Construct external varibale matrix (Remove Scrap_Imports_CN.lag)
Xreg_matrix_2 <- model.matrix(~ Total_theft.lag + Copper_price.lag + Unwork_NSW.lag + intervention.lag + t_since.lag + Feb + Mar + APr + May + Jun + Jul + Aug + Sep + Oct + Nov + Dec, data = train_data)

# Train the SARIMAX model
arimax_model_2 <- auto.arima(train_data$cases, xreg = Xreg_matrix_2, max.p = 5, max.d = 2, max.q = 5, 
                             seasonal = TRUE, stepwise = FALSE, approximation = FALSE)
# Model summary
summary(arimax_model_2)

# Coefficient test
coeftest(arimax_model_2)
```

```{r}
# Construct external varibale matrix (Remove t_since.lag)
Xreg_matrix_3 <- model.matrix(~ Total_theft.lag + Copper_price.lag + Unwork_NSW.lag + intervention.lag + Feb + Mar + APr + May + Jun + Jul + Aug + Sep + Oct + Nov + Dec, data = train_data)

# Train the SARIMAX model
arimax_model_3 <- auto.arima(train_data$cases, xreg = Xreg_matrix_3, max.p = 5, max.d = 2, max.q = 5, 
                             seasonal = TRUE, stepwise = FALSE, approximation = FALSE)
# Model summary
summary(arimax_model_3)

# Coefficient test
coeftest(arimax_model_3)
```

```{r}
# Construct external varibale matrix (remove Unwork_NSW.lag)
Xreg_matrix_4 <- model.matrix(~ Total_theft.lag + Copper_price.lag + intervention.lag + Feb + Mar + APr + May + Jun + Jul + Aug + Sep + Oct + Nov + Dec, data = train_data)

# Train the SARIMAX model
arimax_model_4 <- auto.arima(train_data$cases, xreg = Xreg_matrix_4, max.p = 5, max.d = 2, max.q = 5, 
                             seasonal = TRUE, stepwise = FALSE, approximation = FALSE)
# Model summary
summary(arimax_model_4)

# Coefficient test
coeftest(arimax_model_4)
```

```{r}
# Construct external varibale matrix (Feb)
Xreg_matrix_5 <- model.matrix(~ Total_theft.lag + Copper_price.lag + intervention.lag + Mar + APr + May + Jun + Jul + Aug + Sep + Oct + Nov + Dec, data = train_data)

# Train the SARIMAX model
arimax_model_5 <- auto.arima(train_data$cases, xreg = Xreg_matrix_5, max.p = 5, max.d = 2, max.q = 5, 
                             seasonal = TRUE, stepwise = FALSE, approximation = FALSE)
# Model summary
summary(arimax_model_5)

# Coefficient test
coeftest(arimax_model_5)
```

```{r}
# Construct external varibale matrix (Jul)
Xreg_matrix_6 <- model.matrix(~ Total_theft.lag + Copper_price.lag + intervention.lag + Mar + APr + May + Jun + Aug + Sep + Oct + Nov + Dec, data = train_data)

# Train the SARIMAX model
arimax_model_6 <- auto.arima(train_data$cases, xreg = Xreg_matrix_6, max.p = 5, max.d = 2, max.q = 5, 
                             seasonal = TRUE, stepwise = FALSE, approximation = FALSE)
# Model summary
summary(arimax_model_6)

# Coefficient test
coeftest(arimax_model_6)
```

```{r}
# Construct external varibale matrix (remove Dec)
Xreg_matrix_7 <- model.matrix(~ Total_theft.lag + Copper_price.lag + intervention.lag + Mar + APr + May + Jun + Aug + Sep + Oct + Nov, data = train_data)

# Train the SARIMAX model
arimax_model_7 <- auto.arima(train_data$cases, xreg = Xreg_matrix_7, max.p = 5, max.d = 2, max.q = 5, 
                             seasonal = TRUE, stepwise = FALSE, approximation = FALSE)
# Model summary
summary(arimax_model_7)

# Coefficient test
coeftest(arimax_model_7)
```

```{r}
# Construct external varibale matrix (remove APr)
Xreg_matrix_8 <- model.matrix(~ Total_theft.lag + Copper_price.lag + intervention.lag + Mar + May + Jun + Aug + Sep + Oct + Nov, data = train_data)

# Train the SARIMAX model
arimax_model_8 <- auto.arima(train_data$cases, xreg = Xreg_matrix_8, max.p = 5, max.d = 2, max.q = 5, 
                             seasonal = TRUE, stepwise = FALSE, approximation = FALSE)
# Model summary
summary(arimax_model_8)

# Coefficient test
coeftest(arimax_model_8)
```

```{r}
# Construct external varibale matrix (remove Aug)
Xreg_matrix_9 <- model.matrix(~ Total_theft.lag + Copper_price.lag + intervention.lag + Mar + May + Jun + Sep + Oct + Nov, data = train_data)

# Train the SARIMAX model
arimax_model_9 <- auto.arima(train_data$cases, xreg = Xreg_matrix_9, max.p = 5, max.d = 2, max.q = 5, 
                             seasonal = TRUE, stepwise = FALSE, approximation = FALSE)
# Model summary
summary(arimax_model_9)

# Coefficient test
coeftest(arimax_model_9)
```

```{r}
# Construct external varibale matrix (remove Oct)
Xreg_matrix_10 <- model.matrix(~ Total_theft.lag + Copper_price.lag + intervention.lag + Mar + May + Jun + Sep + Nov, data = train_data)

# Train the SARIMAX model
arimax_model_10 <- auto.arima(train_data$cases, xreg = Xreg_matrix_10, max.p = 5, max.d = 2, max.q = 5, 
                             seasonal = TRUE, stepwise = FALSE, approximation = FALSE)
# Model summary
summary(arimax_model_10)

# Coefficient test
coeftest(arimax_model_10)
```

```{r}
# Construct external varibale matrix (remove Mar)
Xreg_matrix_11 <- model.matrix(~ Total_theft.lag + Copper_price.lag + intervention.lag + May + Jun + Sep + Nov, data = train_data)

# Train the SARIMAX model
arimax_model_11 <- auto.arima(train_data$cases, xreg = Xreg_matrix_11, max.p = 5, max.d = 2, max.q = 5, 
                             seasonal = TRUE, stepwise = FALSE, approximation = FALSE)
# Model summary
summary(arimax_model_11)

# Coefficient test
coeftest(arimax_model_11)
```

```{r}
# Construct external varibale matrix (remove Nov)
Xreg_matrix_12 <- model.matrix(~ Total_theft.lag + Copper_price.lag + intervention.lag + May + Jun + Sep, data = train_data)

# Train the SARIMAX model
arimax_model_12 <- auto.arima(train_data$cases, xreg = Xreg_matrix_12, max.p = 5, max.d = 2, max.q = 5, 
                             seasonal = TRUE, stepwise = FALSE, approximation = FALSE)
# Model summary
summary(arimax_model_12)

# Coefficient test
coeftest(arimax_model_12)
```

## Residual Diagnostics

Model residuals from the final specification (Model 12) were subjected to comprehensive diagnostics:

-   Ljung–Box test (lag = 30) for autocorrelation independence.

-   Shapiro–Wilk test for residual normality.

-   ARCH LM test for conditional heteroscedasticity.

-   ADF test to confirm residual stationarity.

All results indicated that the residuals met the standard ARIMAX assumptions, with no severe autocorrelation, heteroscedasticity, or non-stationarity issues.

```{r}
# Calculating the residual of the final ARIMAX model
residuals_arimax <- residuals(arimax_model_12)

# Conduct Ljung–Box test to examine residual independence  
Box.test(residuals_arimax, lag = 30, type = "Ljung-Box")

# Perform Shapiro–Wilk test to assess normality of residuals  
shapiro_test_result <- shapiro.test(residuals_arimax)
print(shapiro_test_result)

# Use ARCH LM test to detect heteroscedasticity in residuals  
ArchTest(residuals_arimax, lags = 10)

library(tseries)
# Extract residuals from the SARIMAX model  
residuals_arimax <- residuals(arimax_model_12)

# Perform Augmented Dickey–Fuller (ADF) test to evaluate residual stationarity  
adf.test(residuals_arimax)
```

## Forecasting and Performance Evaluation

Out-of-sample forecasting was conducted on the test dataset using the retained exogenous regressors. Forecasted values were directly compared with observed values without log transformation. Visualization was performed using ggplot2, with consistent formatting to ensure quarterly labeling and interpretability.

We computed a suite of forecast accuracy metrics, including:

-   Mean Error (ME)

-   Root Mean Squared Error (RMSE)

-   Mean Absolute Error (MAE)

-   Mean Percentage Error (MPE)

-   Mean Absolute Percentage Error (MAPE)

-   Mean Absolute Scaled Error (MASE)

-   R² (Coefficient of Determination)

These indicators jointly assess bias, variance, scale-adjusted error, and explained variance.

```{r}
library(ggplot2)
library(lubridate)
library(dplyr)

forecast_xreg_12 <- model.matrix(~ Total_theft.lag + Copper_price.lag + intervention.lag + May + Jun + Sep, data = test_data)
forecast_result_12 <- forecast(arimax_model_12, xreg = forecast_xreg_12)

# Add columns for predicted and actual values (no log re-transformation)
test_data$predicted_cases <- forecast_result_12$mean
test_data$actual_cases <- test_data$cases

# Plotting (Comparison between predicted and actual values)
ggplot(test_data, aes(x = date)) +
  geom_step(aes(y = actual_cases, color = "Actual Cases"), size = 1.2) +
  geom_step(aes(y = predicted_cases, color = "Predicted Cases"), size = 1.2) +
  scale_color_manual(
    values = c("Actual Cases" = "#1f77b4",
               "Predicted Cases" = "black")
  ) +
  scale_x_date(
    date_breaks = "3 months",
    labels = function(x) paste0(format(x, "%Y"), "-Q", lubridate::quarter(x))
  ) +
  scale_y_continuous(
    limits = c(0, 100),
    breaks = seq(0, 100, by = 20)
  ) +
  labs(
    title = "Comparison of Predicted vs. Actual Cases by Quarter",
    x = "Quarter",
    y = "Number of Theft Cases",
    color = "Legend"
  ) +
  theme_minimal() +
  theme(
    plot.title = element_text(size = 14, face = "bold"),
    axis.title = element_text(size = 12),
    axis.text = element_text(size = 10),
    legend.title = element_text(size = 10),
    legend.text = element_text(size = 10)
  )


library(dplyr)

# Compute error terms and associated metrics
comparison_data <- test_data %>%
  mutate(
    Error = actual_cases - predicted_cases,
    Abs_Error = abs(Error),
    Squared_Error = Error^2,
    Pct_Error = ifelse(actual_cases == 0, NA, (Error / actual_cases) * 100),
    Abs_Pct_Error = abs(Pct_Error)
  )

# Basic error metrics
ME    <- mean(comparison_data$Error, na.rm = TRUE)
RMSE  <- sqrt(mean(comparison_data$Squared_Error, na.rm = TRUE))
MAE   <- mean(comparison_data$Abs_Error, na.rm = TRUE)
MPE   <- mean(comparison_data$Pct_Error, na.rm = TRUE)
MAPE  <- mean(comparison_data$Abs_Pct_Error, na.rm = TRUE)

# Construct a naive benchmark (for MASE calculation)
comparison_data <- comparison_data %>%
  mutate(
    Naive = lag(actual_cases, 1),
    Naive_Error = actual_cases - Naive,
    Abs_Naive_Error = abs(Naive_Error)
  )
Naive_MAE <- mean(comparison_data$Abs_Naive_Error, na.rm = TRUE)
MASE <- MAE / Naive_MAE

# Compute R² (Coefficient of Determination)
SSE <- sum((comparison_data$actual_cases - comparison_data$predicted_cases)^2, na.rm = TRUE)
SST <- sum((comparison_data$actual_cases - mean(comparison_data$actual_cases, na.rm = TRUE))^2, na.rm = TRUE)
R_squared <- 1 - (SSE / SST)

# Print R² result
cat("R-squared (Coefficient of Determination):", round(R_squared, 4), "\n")

# Output all error metrics
cat("ARIMAX Forecast Error Metrics (Original Scale, Test Set):\n")
cat("---------------------------------------------------------\n")
cat("Mean Error (ME):",    round(ME, 4), "\n")
cat("Root Mean Squared Error (RMSE):", round(RMSE, 4), "\n")
cat("Mean Absolute Error (MAE):",      round(MAE, 4), "\n")
cat("Mean Percentage Error (MPE):",    round(MPE, 4), "%\n")
cat("Mean Absolute Percentage Error (MAPE):", round(MAPE, 4), "%\n")
cat("Mean Absolute Scaled Error (MASE):", round(MASE, 4), "\n")
cat("R-squared (Coefficient of Determination):", round(R_squared, 4), "\n")
```

## Residual Autocorrelation Structure

To further evaluate model adequacy, we visualized the autocorrelation and partial autocorrelation of residuals via `ggAcf()` and `ggPacf()` plots. No significant lags were detected within the 30-lag window, supporting the residual independence assumption.

```{r}
library(forecast)  # For ggAcf and ggPacf functions
library(ggplot2)

# Plot the Autocorrelation Function (ACF) of residuals
acf_arimax_plot <- ggAcf(residuals_arimax, lag.max = 30) +
  labs(
    title = "ACF of ARIMAX Residuals",
    x = "Lag (Months)",
    y = "Autocorrelation"
  ) +
  theme_minimal(base_size = 12) +
  theme(
    plot.title = element_text(face = "bold", hjust = 0.5, size = 14),
    axis.title.x = element_text(face = "bold"),
    axis.title.y = element_text(face = "bold"),
    axis.text = element_text(color = "black"),
    panel.grid.minor = element_blank(),
    plot.background = element_rect(fill = "white", color = NA),
    panel.background = element_rect(fill = "white", color = NA)
  )

# Plot the Partial Autocorrelation Function (PACF) of residuals
pacf_arimax_plot <- ggPacf(residuals_arimax, lag.max = 30) +
  labs(
    title = "PACF of ARIMAX Residuals",
    x = "Lag (Months)",
    y = "Partial Autocorrelation"
  ) +
  theme_minimal(base_size = 12) +
  theme(
    plot.title = element_text(face = "bold", hjust = 0.5, size = 14),
    axis.title.x = element_text(face = "bold"),
    axis.title.y = element_text(face = "bold"),
    axis.text = element_text(color = "black"),
    panel.grid.minor = element_blank(),
    plot.background = element_rect(fill = "white", color = NA),
    panel.background = element_rect(fill = "white", color = NA)
  )

# Display plots
print(acf_arimax_plot)
print(pacf_arimax_plot)
```

## Multicollinearity Assessment

Variance Inflation Factors (VIFs) were calculated using a standard linear model to quantify multicollinearity among predictors. All VIF values were below the conventional threshold of 5, indicating no significant collinearity. A bar plot with a red reference line (VIF = 5) was produced to visualize relative multicollinearity risk.

```{r}
# Step 1: Fit a linear regression model for computing VIF values
vif_model <- lm(cases ~ Total_theft.lag + Copper_price.lag + intervention.lag + May + Jun + Sep, data = train_data)

# Step 2: Extract VIF values
vif_values <- vif(vif_model)
print("Variance Inflation Factor (VIF) values:")
print(vif_values)

# Step 3: Format into a sorted data frame for visualization
vif_df <- data.frame(
  Variable = names(vif_values),
  VIF = vif_values
) %>%
  arrange(VIF) %>%
  mutate(Variable = factor(Variable, levels = Variable))  # Maintain variable order for plotting

# Step 4: Construct horizontal bar plot using ggplot2
vif_plot <- ggplot(vif_df, aes(x = VIF, y = Variable)) +
  geom_bar(stat = "identity", fill = "#1F77B4", width = 0.3) +
  geom_vline(xintercept = 5, linetype = "dashed", color = "red", linewidth = 0.8) +  # Threshold line
  labs(
    title = "Variance Inflation Factor (VIF) for Predictors",
    x = "VIF Value",
    y = "Predictor Variables"
  ) +
  theme_minimal(base_size = 10) +
  theme(
    plot.title = element_text(face = "bold", hjust = 0.5, size = 14),
    axis.title.x = element_text(face = "bold", size = 12),
    axis.title.y = element_text(face = "bold", size = 12),
    axis.text = element_text(color = "black", size = 10),
    panel.grid.major.y = element_blank(),
    panel.grid.minor = element_blank(),
    plot.background = element_rect(fill = "white", color = NA),
    panel.background = element_rect(fill = "white", color = NA)
  )

# Step 5: Print the plot
print(vif_plot)
```

## Summary

This modeling process was designed to meet the highest standards of replicability in quantitative criminology and transportation research. The complete codebase, including hyperparameter settings, forecasting procedures, residual diagnostics, and visualization routines, is publicly available in the project repository.

Last updated: 23 July 2025 Maintainer: \[Hongbo Zhao / Contact: hongbo.zhao\@uqconnect.edu.au\]
